require "forwardable"
require "pattern_patch/core_ext"
require "pattern_patch/patch"
require "pattern_patch/utilities"
require "pattern_patch/version"

# Utility gem for modifying arbitrary text files using a method similar to
# rendering Rails partials.
#
# @author Jimmy Dee (https://github.com/jdee)
module PatternPatch
  extend Forwardable

  # Generic exception class for PatternPatch exceptions
  class Error < RuntimeError; end

  # Exception generated by patch method when patch_dir is not set properly
  class ConfigurationError < Error; end

  module Methods
    extend Forwardable

    # @!attribute patch_dir
    # Set this to conveniently load patches from a common folder with
    # the patch method.
    # @return [String] Path to a directory for use with patch
    attr_accessor :patch_dir

    # @!attribute safe_level
    # Set the default safe level to use with ERb. This is the same as the value
    # of PatternPatch.safe_level.
    # @return [Object, nil] The current default safe level for ERb
    def_delegator "PatternPatch", :safe_level, :safe_level
    def_delegator "PatternPatch", :safe_level=, :safe_level=

    # @!attribute trim_mode
    # Set the default trim mode to use with ERb. This is the same as the value
    # of PatternPatch.trim_mode.
    # @return [String, nil] The current default trim mode for ERb
    def_delegator "PatternPatch", :trim_mode, :trim_mode
    def_delegator "PatternPatch", :trim_mode=, :trim_mode=

    # Loads a patch from the patch_dir
    # @param name [#to_s] Name of a patch to load from the patch_dir
    # @return [Patch] A patch loaded from the patch_dir
    # @raise [ConfigurationError] If patch_dir is nil or is not a valid directory path
    def patch(name)
      raise ConfigurationError, "patch_dir has not been set" if patch_dir.nil?
      raise ConfigurationError, "patch_dir #{patch_dir} is not a directory" unless Dir.exist?(patch_dir)
      Patch.from_yaml File.join(patch_dir, "#{name}.yml")
    end

    # Useful to configure PatternPatch without using the class
    # (PatternPatch.patch_dir=), ivar (@patch_dir) or explicit
    # setter (self.patch_dir=).
    #
    #     include PatternPatch::Methods
    #     patch_config do |c|
    #       c.patch_dir = 'lib/assets/patches'
    #       c.trim_mode = '<>'
    #     end
    #
    # or
    #
    #     include PatternPatch::Methods
    #     patch_config.patch_dir = 'lib/assets/patches'
    #     patch_config.trim_mode = '<>'
    #
    # @yield self if block_given?
    # @return self or return value of block
    def patch_config(&block)
      if block_given?
        yield self
      else
        self
      end
    end
  end

  class << self
    # @!attribute safe_level
    # The default safe level to use with ERb. Defaults to nil.
    # @return [Object, nil] The current default safe level for ERb
    attr_accessor :safe_level

    # @!attribute trim_mode
    # The default trim mode to use with ERb. Defaults to nil.
    # @return [String, nil] The current default trim mode for ERb
    attr_accessor :trim_mode
  end

  extend Methods
end
