require "pattern_patch/core_ext"
require "pattern_patch/patch"
require "pattern_patch/utilities"
require "pattern_patch/version"

# Utility gem for modifying arbitrary text files using a method similar to
# rendering Rails partials.
#
# @author Jimmy Dee (https://github.com/jdee)
module PatternPatch
  # Generic exception class for PatternPatch exceptions
  class Error < RuntimeError; end

  # Exception generated by patch method when patch_dir is not set properly
  class ConfigurationError < Error; end

  module Methods
    # @!attribute patch_dir
    # Set this to conveniently load patches from a common folder with
    # the patch method.
    # @return [String] Path to a directory for use with patch
    attr_accessor :patch_dir

    # The default safe level to use with ERb
    # @return [Object, nil] A valid $SAFE value for ERb
    def safe_level
      PatternPatch.safe_level
    end

    # Set a new default safe level for use with ERb
    # @param level [Object, nil] A valid $SAFE value for ERb
    def safe_level=(level)
      PatternPatch.safe_level = level
    end

    # The default trim mode to use with ERb
    # @return [String, nil] A valid trim mode for ERb
    def trim_mode
      PatternPatch.trim_mode
    end

    # Set a new default trim mode for use with ERb
    # @param mode [String, nil] A valid trim mode for ERb
    def trim_mode=(mode)
      PatternPatch.trim_mode = mode
    end

    # Loads a patch from the patch_dir
    # @param name [#to_s] Name of a patch to load from the patch_dir
    # @return [Patch] A patch loaded from the patch_dir
    # @raise [ConfigurationError] If patch_dir is nil or is not a valid directory path
    def patch(name)
      raise ConfigurationError, "patch_dir has not been set" if patch_dir.nil?
      raise ConfigurationError, "patch_dir is not a directory" unless Dir.exist?(patch_dir)
      Patch.from_yaml File.join(patch_dir, "#{name}.yml")
    end
  end

  # The default safe level to use with ERb
  # @return [Object, nil] A valid $SAFE value for ERb
  def self.safe_level
    @safe_level
  end

  # Set a new default safe level for use with ERb
  # @param level [Object, nil] A valid $SAFE value for ERb
  def self.safe_level=(level)
    @safe_level = level
  end

  # The default trim mode to use with ERb
  # @return [String, nil] A valid trim mode for ERb
  def self.trim_mode
    @trim_mode
  end

  # Set a new default trim mode for use with ERb
  # @param mode [String, nil] A valid trim mode for ERb
  def self.trim_mode=(mode)
    @trim_mode = mode
  end

  extend Methods
end
